diff --git a/run.py b/run.py
index 9b2b1e2..5a23d8e 100644
--- a/run.py
+++ b/run.py
@@ -16,6 +16,12 @@ import argparse
 import os
 import subprocess
 import sys
+
+# --- Ensure repo root is importable (robust when invoked from other CWDs) ----
+THIS_DIR = os.path.dirname(os.path.abspath(__file__))
+if THIS_DIR not in sys.path:
+    sys.path.insert(0, THIS_DIR)
+

 def install_requirements(req_path: str):
     """Install requirements with the same Python interpreter running this script."""
@@ -30,6 +36,44 @@ def install_requirements(req_path: str):
     )
     print(">>> Dependencies installed.")

+def _resolve_input_path(p: str, default_subdir: str = "inputs") -> str:
+    """
+    Resolve an input path with smart fallbacks:
+      1) If 'p' exists as-is -> return it
+      2) If basename(p) exists under ./inputs/ -> return that
+      3) Otherwise -> raise FileNotFoundError with a helpful message
+    """
+    if not p:
+        raise FileNotFoundError("No input path provided")
+
+    # Absolute or relative path provided and exists
+    if os.path.isfile(p):
+        return p
+
+    # Try ./inputs/<basename>
+    base = os.path.basename(p)
+    candidate = os.path.join(THIS_DIR, default_subdir, base)
+    if os.path.isfile(candidate):
+        return candidate
+
+    raise FileNotFoundError(
+        f"Input file not found: {p!r}. "
+        f"Tried: {os.path.abspath(p)} and {candidate!r}. "
+        "Place the file under ./inputs/ or pass --pnf/--esoa with a correct path."
+    )
+
+def _outputs_dir() -> str:
+    """
+    Always use ./outputs relative to repo root for intermediate + final outputs.
+    Creates the directory if missing.
+    """
+    d = os.path.join(THIS_DIR, "outputs")
+    os.makedirs(d, exist_ok=True)
+    return d
+
+
 def main_entry():
     parser = argparse.ArgumentParser(description="Run full ESOA pipeline (prepare â†’ match)")
     parser.add_argument(
@@ -38,11 +82,15 @@ def main_entry():
         help="Path to PNF CSV (default: inputs/pnf.csv)"
     )
     parser.add_argument(
-        "--esoa", default="esoa.csv", help="Path to ESOA CSV"
-    )
-    parser.add_argument("--outdir", default=".", help="Directory for intermediate outputs")
-    parser.add_argument("--out", default="esoa_matched.csv", help="Final matched CSV output")
-    parser.add_argument("--requirements", default="", help="Optional requirements.txt to install")
-    parser.add_argument("--skip-install", action="store_true", help="Skip pip install step")
+        "--esoa",
+        default="inputs/esoa.csv",
+        help="Path to ESOA CSV (default: inputs/esoa.csv)"
+    )
+    parser.add_argument(
+        "--out",
+        default="esoa_matched.csv",
+        help="Final matched CSV filename (always written to ./outputs/)"
+    )
+    parser.add_argument("--requirements", default="", help="Optional requirements.txt to install")
+    parser.add_argument("--skip-install", action="store_true", help="Skip pip install step")

     args = parser.parse_args()

@@ -96,10 +144,22 @@ def main_entry():
     import main  # noqa: E402

     # Resolve inputs and outputs
-    pnf_path = _resolve_input_path(args.pnf)
-    esoa_path = _resolve_input_path(args.esoa)
-    outdir = _ensure_outdir(args.outdir)
-    out_path = os.path.join(outdir, os.path.basename(args.out)) if not os.path.isabs(args.out) else args.out
+    pnf_path = _resolve_input_path(args.pnf)
+    esoa_path = _resolve_input_path(args.esoa)
+
+    # Force all outputs to ./outputs/
+    outdir = _outputs_dir()
+    out_path = os.path.join(outdir, os.path.basename(args.out))
+
+    print(">>> Resolved paths:")
+    print(f"    PNF : {pnf_path}")
+    print(f"    ESOA: {esoa_path}")
+    print(f"    OUTDIR: {outdir}")
+    print(f"    OUT: {out_path}")

-    # Run the full pipeline
-    main.run_all(pnf_path, esoa_path, outdir, out_path)
+    # Run the full pipeline (always writing under ./outputs)
+    main.run_all(pnf_path, esoa_path, outdir, out_path)
 